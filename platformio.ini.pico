;PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = build
libdeps_dir = /tmp/libdeps

[env]
framework = arduino
platform = https://github.com/mumpf/platform-raspberrypi.git
board = pico
board_build.core = earlephilhower
; configure filesystem size. Default 0 Mbyte.
; board_build.filesystem_size = 1M
; inject core package.. not yet registered with PlatformIO
; registry, so pull working version directly from git / download page.
; note that download link for toolchain is specific for OS. see https://github.com/earlephilhower/pico-quick-toolchain/releases.
platform_packages = 
    mumpf/framework-arduinopico@https://github.com/mumpf/arduino-pico.git
    maxgerhardt/toolchain-pico@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.2-a/x86_64-w64-mingw32.arm-none-eabi-9d55fd1.220202.zip

    ; maxgerhardt/framework-arduinopico@file://c:\users\d019748\platformio\arduino-pico

build_flags =
  -D DEBUG_DELAY=10000
  -D SERIAL_DEBUG=Serial
  -D BOARD_ENOCEAN
  -D SMALL_GROUPOBJECT
  -D ENOCEANGATEWAY
  -D MASK_VERSION=0x07B0
  ; use flash directly
  -D KNX_FLASH_SIZE=0x4000
  -D KNX_FLASH_OFFSET=0x180000 
  -frtti
  -Wno-unknown-pragmas 
  -Wno-switch
lib_ldf_mode = deep+
lib_extra_dirs =
  ${PROJECT_DIR}\..
debug_tool = jlink
debug_build_flags = -O0 -ggdb3
debug_extra_cmds = 
  set output-radix 16
; build_type = debug
; debug_tool = jlink
[env:build]
upload_protocol = picotool
[env:uploadUSB]
upload_protocol = picotool
[env:uploadJLINK]
upload_protocol = jlink
